{"version":3,"file":"breadcrumb.service.d.ts","sources":["breadcrumb.service.d.ts"],"names":[],"mappingssourcesContent":["import { ActivatedRoute, Router } from '@angular/router';\nimport { Breadcrumb } from './types/breadcrumb';\nimport { BreadcrumbObject } from './types/breadcrumb.config';\nexport declare type BreadcrumbDefinition = Breadcrumb & BreadcrumbObject;\nexport declare class BreadcrumbService {\n    private activatedRoute;\n    private router;\n    private baseHref;\n    /**\n     * dynamicBreadcrumbStore holds information about dynamically updated breadcrumbs.\n     * Breadcrumbs can be set from anywhere (component, service) in the app.\n     * On every breadcrumb update check this store and use the info if available.\n     */\n    private dynamicBreadcrumbStore;\n    /**\n     * breadcrumbList for the current route\n     * When breadcrumb info is changed dynamically, check if the currentBreadcrumbs is effected\n     * If effected, update the change and emit a new stream\n     */\n    private currentBreadcrumbs;\n    private previousBreadcrumbs;\n    /**\n     * Breadcrumbs observable to be subscribed by BreadcrumbComponent\n     * Emits on every route change OR dynamic update of breadcrumb\n     */\n    private breadcrumbs;\n    breadcrumbs$: import(\"rxjs\").Observable<BreadcrumbDefinition[]>;\n    constructor(activatedRoute: ActivatedRoute, router: Router);\n    /**\n     * Whenever route changes build breadcrumb list again\n     */\n    private detectRouteChanges;\n    private getRootBreadcrumb;\n    private prepareBreadcrumbItem;\n    private prepareBreadcrumbList;\n    private getFromStore;\n    /**\n     * use exact match instead of regexp.test\n     * for /mentor/[^/]+ we should match '/mentor/12' but not '/mentor/12/abc'\n     */\n    private matchRegex;\n    /**\n     * if the path segment has route params, read the param value from url\n     * for each segment of route this gets called\n     *\n     * for mentor/:id/view - it gets called with mentor, :id, view 3 times\n     */\n    private resolvePathSegment;\n    /**\n     * queryParams & fragments for previous breadcrumb path are copied over to new list\n     */\n    private getQueryParamsFromPreviousList;\n    /**\n     * set current activated route query params to the last breadcrumb item\n     */\n    private setQueryParamsForActiveBreadcrumb;\n    /**\n     * For a specific route, breadcrumb can be defined either on parent OR it's child(which has empty path)\n     * When both are defined, child takes precedence\n     *\n     * Ex: Below we are setting breadcrumb on both parent and child.\n     * So, child takes precedence and \"Defined On Child\" is displayed for the route 'home'\n     * { path: 'home', loadChildren: './home/home.module#HomeModule' , data: {breadcrumb: \"Defined On Module\"}}\n     *                                                AND\n     * children: [\n     *   { path: '', component: ShowUserComponent, data: {breadcrumb: \"Defined On Child\" }\n     * ]\n     */\n    private parseRouteData;\n    /**\n     * get empty children of a module or Component. Empty child is the one with path: ''\n     * When parent and it's children (that has empty route path) define data merge them both with child taking precedence\n     */\n    private mergeWithBaseChildData;\n    /**\n     * Update breadcrumb dynamically\n     *\n     * key can be a path | alias\n     *\n     * 1) Using complete route path. route can be passed the same way you define angular routes\n     * - path can be passed as 'exact path(routeLink)' or 'path with params(routeRegex)'\n     * - update label Ex: set('/mentor', 'Mentor'), set('/mentor/:id', 'Mentor Details')\n     * - change visibility Ex: set('/mentor/:id/edit', { skip: true })\n     * ------------------------------------------ OR ------------------------------------------\n     * 2) Using route alias (prefixed with '@'). alias should be unique for a route\n     * - update label Ex: set('@mentor', 'Enabler')\n     * - change visibility Ex: set('@mentorEdit', { skip: true })\n     *\n     *\n     * value can be string | BreadcrumbObject | BreadcrumbFunction\n     */\n    set(key: string, breadcrumb: string | BreadcrumbObject): void;\n    /**\n     * Update the store to reuse for dynamic declarations\n     * If the store already has this route definition update it, else add\n     */\n    private updateStore;\n    /**\n     * If breadcrumb is present in current breadcrumbs update it and emit new stream\n     */\n    private updateCurrentBreadcrumbs;\n    /**\n     * For a route with path param, we create regex dynamically from angular route syntax\n     * '/mentor/:id' becomes '/mentor/[^/]',\n     * breadcrumbService.set('/mentor/:id', 'Uday') should update 'Uday' as label for '/mentor/2' OR 'mentor/ada'\n     */\n    private buildRegex;\n    private ensureLeadingSlash;\n    /**\n     * In App's RouteConfig, breadcrumb can be defined as a string OR a function OR an object\n     *\n     * string: simple static breadcrumb label for a path\n     * function: callback that gets invoked with resolved path param\n     * object: additional data defined along with breadcrumb label that gets passed to *xngBreadcrumbItem directive\n     */\n    private extractLabel;\n    private extractObject;\n}\n"]}