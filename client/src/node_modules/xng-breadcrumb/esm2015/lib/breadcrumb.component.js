import { Component, ContentChild, Input, TemplateRef, ViewEncapsulation, } from '@angular/core';
import { Router } from '@angular/router';
import { BreadcrumbItemDirective } from './breadcrumb-item.directive';
import { BreadcrumbService } from './breadcrumb.service';
export class BreadcrumbComponent {
    constructor(breadcrumbService, router) {
        this.breadcrumbService = breadcrumbService;
        this.router = router;
        this._separator = '/';
        /**
         * If true, breadcrumb is auto generated even without any mapping label
         * Default label is same as route segment
         */
        this.autoGenerate = true;
        /**
         * By default query params will be preserved with breadcrumbs
         */
        this.preserveQueryParams = true;
        /**
         * By default query fragments will be preserved with breadcrumbs
         */
        this.preserveFragment = true;
        /**
         * custom class provided by consumer to increase specificity
         * This will benefit to override styles that are conflicting
         */
        this.class = '';
    }
    /**
     * separator between breadcrumbs, defaults to '/'.
     * User can customize separator either by passing a String or Template
     *
     * String --> Ex: <xng-breadcrumb separator="-"> </xng-breadcrumb>
     *
     * Template --> Ex: <xng-breadcrumb [separator]="separatorTemplate"> </xng-breadcrumb>
     * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>
     */
    set separator(value) {
        if (value instanceof TemplateRef) {
            this.separatorTemplate = value;
            this._separator = undefined;
        }
        else {
            this.separatorTemplate = undefined;
            this._separator = value || '/';
        }
    }
    get separator() {
        return this._separator;
    }
    ngOnInit() {
        this.subscription = this.breadcrumbService.breadcrumbs$.subscribe((breadcrumbs) => {
            this.breadcrumbs = breadcrumbs
                .map((breadcrumb) => {
                // Do not mutate breadcrumb as its source of truth.
                // There can be scenarios where we can have multiple xng-breadcrumb instances in page
                return Object.assign(Object.assign({}, breadcrumb), { queryParams: this.preserveQueryParams
                        ? breadcrumb.queryParams
                        : undefined, fragment: this.preserveFragment ? breadcrumb.fragment : undefined });
            })
                .filter((breadcrumb) => {
                // Usually, breadcrumb list can contain a combination of auto generated and user specified labels
                // this filters autogenerated labels in case of "[autoGenerate]: false"
                if (this.autoGenerate) {
                    return true;
                }
                return !breadcrumb.isAutoGeneratedLabel;
            });
        });
    }
    ngOnDestroy() {
        this.subscription.unsubscribe();
    }
    handleRoute(breadcrumb) {
        const routeLink = breadcrumb.routeInterceptor
            ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)
            : breadcrumb.routeLink;
        const { queryParams, fragment } = breadcrumb;
        this.router.navigate([routeLink], { queryParams, fragment });
    }
}
BreadcrumbComponent.decorators = [
    { type: Component, args: [{
                selector: 'xng-breadcrumb',
                template: "<nav aria-label=\"breadcrumb\" class=\"xng-breadcrumb-root\" [ngClass]=\"class\">\n  <ol class=\"xng-breadcrumb-list\">\n    <ng-container\n      *ngFor=\"\n        let breadcrumb of breadcrumbs; \n        last as isLast; \n        first as isFirst; \n        index as index; \n        count as count;\">\n      <li class=\"xng-breadcrumb-item\">\n        <a\n          *ngIf=\"!isLast\"\n          (click)=\"handleRoute(breadcrumb)\"\n          class=\"xng-breadcrumb-link\"\n          [ngClass]=\"{ 'xng-breadcrumb-link-disabled': breadcrumb.disable }\"\n          [attr.aria-disabled]=\"breadcrumb.disable\"\n        >\n          <ng-container\n            *ngTemplateOutlet=\"\n              itemTemplate;\n              context: {\n                $implicit: breadcrumb.label,\n                info: breadcrumb.info,\n                last: isLast,\n                first: isFirst,\n                index: index,\n                count: count\n              }\n            \"\n          ></ng-container>\n          <ng-container *ngIf=\"!itemTemplate\">{{\n            breadcrumb.label\n          }}</ng-container>\n        </a>\n\n        <label *ngIf=\"isLast\" class=\"xng-breadcrumb-trail\">\n          <ng-container\n            *ngTemplateOutlet=\"\n              itemTemplate;\n              context: {\n                $implicit: breadcrumb.label,\n                info: breadcrumb.info,\n                last: isLast,\n                first: isFirst,\n                index: index,\n                count: count\n              }\n            \"\n          ></ng-container>\n          <ng-container *ngIf=\"!itemTemplate\">{{\n            breadcrumb.label\n          }}</ng-container>\n        </label>\n      </li>\n\n      <li\n        *ngIf=\"!isLast\"\n        class=\"xng-breadcrumb-separator\"\n        aria-hidden=\"true\"\n        role=\"separator\"\n      >\n        <ng-container *ngTemplateOutlet=\"separatorTemplate\"></ng-container>\n        <ng-container *ngIf=\"!separatorTemplate\">{{ separator }}</ng-container>\n      </li>\n    </ng-container>\n  </ol>\n</nav>\n",
                encapsulation: ViewEncapsulation.None,
                styles: [".xng-breadcrumb-root{color:rgba(0,0,0,.6);margin:0}.xng-breadcrumb-list{align-items:center;display:flex;flex-wrap:wrap;margin:0;padding:0}.xng-breadcrumb-item{list-style:none}.xng-breadcrumb-trail{align-items:center;color:rgba(0,0,0,.9);display:flex}.xng-breadcrumb-link{align-items:center;color:inherit;display:flex;text-decoration:none;transition:-webkit-text-decoration .3s;transition:text-decoration .3s;transition:text-decoration .3s,-webkit-text-decoration .3s;white-space:nowrap}.xng-breadcrumb-link:hover{text-decoration:underline}.xng-breadcrumb-link-disabled{cursor:disabled;pointer-events:none}.xng-breadcrumb-separator{-moz-user-select:none;-ms-user-select:none;-webkit-user-select:none;display:flex;margin-left:8px;margin-right:8px;user-select:none}"]
            },] }
];
BreadcrumbComponent.ctorParameters = () => [
    { type: BreadcrumbService },
    { type: Router }
];
BreadcrumbComponent.propDecorators = {
    itemTemplate: [{ type: ContentChild, args: [BreadcrumbItemDirective, { static: false, read: TemplateRef },] }],
    autoGenerate: [{ type: Input }],
    preserveQueryParams: [{ type: Input }],
    preserveFragment: [{ type: Input }],
    class: [{ type: Input }],
    separator: [{ type: Input, args: ['separator',] }]
};
//# sourceMappingURL=breadcrumb.component.js.map