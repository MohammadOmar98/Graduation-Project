{"version":3,"file":"breadcrumb.component.js","sourceRoot":"/Users/u0v000i/Desktop/code/temp/xng-breadcrumb/libs/xng-breadcrumb/src/","sources":["lib/breadcrumb.component.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Component,\n  ContentChild,\n  Input,\n  OnInit,\n  TemplateRef,\n  ViewEncapsulation,\n  OnDestroy,\n} from '@angular/core';\nimport { Router } from '@angular/router';\nimport { Observable, Subscription } from 'rxjs';\nimport { BreadcrumbItemDirective } from './breadcrumb-item.directive';\nimport { BreadcrumbService, BreadcrumbDefinition } from './breadcrumb.service';\n\n@Component({\n  selector: 'xng-breadcrumb',\n  templateUrl: './breadcrumb.component.html',\n  styleUrls: ['./breadcrumb.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class BreadcrumbComponent implements OnInit, OnDestroy {\n  subscription: Subscription;\n  breadcrumbs: BreadcrumbDefinition[];\n  breadcrumbs$: Observable<BreadcrumbDefinition[]>;\n  separatorTemplate: TemplateRef<void>;\n  private _separator = '/';\n\n  /**\n   * Breadcrumb item can be customized with this template\n   * Template context is provided label, additional info, first and last indexes\n   * Use cases:\n   * 1) Add an icon along with label\n   * 2) i18n. {{breadcrumb | translate}} or {{breadcrumb | transloco}}\n   * 3) Change text case {{breadcrumb | titlecase}}\n   */\n  @ContentChild(BreadcrumbItemDirective, { static: false, read: TemplateRef })\n  itemTemplate;\n\n  /**\n   * If true, breadcrumb is auto generated even without any mapping label\n   * Default label is same as route segment\n   */\n  @Input() autoGenerate = true;\n\n  /**\n   * By default query params will be preserved with breadcrumbs\n   */\n  @Input() preserveQueryParams = true;\n\n  /**\n   * By default query fragments will be preserved with breadcrumbs\n   */\n  @Input() preserveFragment = true;\n\n  /**\n   * custom class provided by consumer to increase specificity\n   * This will benefit to override styles that are conflicting\n   */\n  @Input() class = '';\n\n  /**\n   * separator between breadcrumbs, defaults to '/'.\n   * User can customize separator either by passing a String or Template\n   *\n   * String --> Ex: <xng-breadcrumb separator=\"-\"> </xng-breadcrumb>\n   *\n   * Template --> Ex: <xng-breadcrumb [separator]=\"separatorTemplate\"> </xng-breadcrumb>\n   * <ng-template #separatorTemplate><mat-icon>arrow_right</mat-icon></ng-template>\n   */\n  @Input('separator')\n  set separator(value: string | TemplateRef<void>) {\n    if (value instanceof TemplateRef) {\n      this.separatorTemplate = value;\n      this._separator = undefined;\n    } else {\n      this.separatorTemplate = undefined;\n      this._separator = value || '/';\n    }\n  }\n  get separator() {\n    return this._separator;\n  }\n\n  constructor(\n    private breadcrumbService: BreadcrumbService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {\n    this.subscription = this.breadcrumbService.breadcrumbs$.subscribe(\n      (breadcrumbs) => {\n        this.breadcrumbs = breadcrumbs\n          .map((breadcrumb) => {\n            // Do not mutate breadcrumb as its source of truth.\n            // There can be scenarios where we can have multiple xng-breadcrumb instances in page\n            return {\n              ...breadcrumb,\n              queryParams: this.preserveQueryParams\n                ? breadcrumb.queryParams\n                : undefined,\n              fragment: this.preserveFragment ? breadcrumb.fragment : undefined,\n            };\n          })\n          .filter((breadcrumb) => {\n            // Usually, breadcrumb list can contain a combination of auto generated and user specified labels\n            // this filters autogenerated labels in case of \"[autoGenerate]: false\"\n            if (this.autoGenerate) {\n              return true;\n            }\n            return !breadcrumb.isAutoGeneratedLabel;\n          });\n      }\n    );\n  }\n  ngOnDestroy() {\n    this.subscription.unsubscribe();\n  }\n\n  handleRoute(breadcrumb: BreadcrumbDefinition) {\n    const routeLink = breadcrumb.routeInterceptor\n      ? breadcrumb.routeInterceptor(breadcrumb.routeLink, breadcrumb)\n      : breadcrumb.routeLink;\n    const { queryParams, fragment } = breadcrumb;\n    this.router.navigate([routeLink], { queryParams, fragment });\n  }\n}\n"]}